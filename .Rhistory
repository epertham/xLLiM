tab <- rbind(tab,tab2)
tab <- subset(tab, index >= 55)
deconf <- 131
pFr <- ggplot(tab,aes(x=index, y=value)) +
facet_wrap(~ variable, scales = "free_y") +
geom_vline(xintercept = idx, linetype="dashed",col="grey") +
geom_vline(xintercept = idx + 21, linetype="dashed",col="grey") +
geom_vline(xintercept = deconf, linetype="dashed",col="grey") +
geom_vline(xintercept = deconf + 21, linetype="dashed",col="grey") +
geom_smooth(method="loess") +
geom_point() # +
# xlim(c(min(tab$index),135))
pFr
summary(tab)
#these libraries need to be loaded
library(utils)
library(ggplot2)
library(reshape2)
library(ggpubr)
theme_set(theme_light())
#read the Dataset sheet into “R”. The dataset will be called "data".
tab <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", na.strings = "", fileEncoding = "UTF-8-BOM")
tab <- subset(tab, countriesAndTerritories == "France")
tab$index <- nrow(tab):1
as.character(tab$dateRep[1])
idx <- tab$index[which(tab$dateRep == "17/03/2020")]
tab <- subset(tab, select = c("index","cases","deaths"))
tab <- melt(tab, id.vars = "index")
tab2 <- tab
tab2$variable <- paste0("log(1+",tab2$variable,")")
tab2$value <- log(1+tab2$value)
tab <- rbind(tab,tab2)
tab <- subset(tab, index >= 55)
deconf <- 131
tab <- subset(tab, tab$value > 0)
pFr <- ggplot(tab,aes(x=index, y=value)) +
facet_wrap(~ variable, scales = "free_y") +
geom_vline(xintercept = idx, linetype="dashed",col="grey") +
geom_vline(xintercept = idx + 21, linetype="dashed",col="grey") +
geom_vline(xintercept = deconf, linetype="dashed",col="grey") +
geom_vline(xintercept = deconf + 21, linetype="dashed",col="grey") +
geom_smooth(method="loess") +
geom_point() # +
# xlim(c(min(tab$index),135))
pFr
?dist
?hclust
?fviz_cluster
library(factoextra)
?fviz_cluster
?eclust
?hcut
?dist
?fviz_dend
#these libraries need to be loaded
library(utils)
library(ggplot2)
library(reshape2)
library(ggpubr)
theme_set(theme_light())
#read the Dataset sheet into “R”. The dataset will be called "data".
tab <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", na.strings = "", fileEncoding = "UTF-8-BOM")
tab <- subset(tab, countriesAndTerritories == "France")
tab$index <- nrow(tab):1
as.character(tab$dateRep[1])
idx <- tab$index[which(tab$dateRep == "17/03/2020")]
tab <- subset(tab, select = c("index","cases","deaths"))
tab <- melt(tab, id.vars = "index")
tab2 <- tab
tab2$variable <- paste0("log(1+",tab2$variable,")")
tab2$value <- log(1+tab2$value)
tab <- rbind(tab,tab2)
tab <- subset(tab, index >= 55)
deconf <- 131
tab <- subset(tab, tab$value > 0)
pFr <- ggplot(tab,aes(x=index, y=value)) +
facet_wrap(~ variable, scales = "free_y") +
geom_vline(xintercept = idx, linetype="dashed",col="grey") +
geom_vline(xintercept = idx + 21, linetype="dashed",col="grey") +
geom_vline(xintercept = deconf, linetype="dashed",col="grey") +
geom_vline(xintercept = deconf + 21, linetype="dashed",col="grey") +
geom_smooth(method="loess") +
geom_point() # +
# xlim(c(min(tab$index),135))
pFr
?hcut
?stats::hcut
?stat::hcut
Nhclust
?hlcust
?hclut
?hclust
#these libraries need to be loaded
library(utils)
library(ggplot2)
library(reshape2)
library(ggpubr)
theme_set(theme_light())
#read the Dataset sheet into “R”. The dataset will be called "data".
tab <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", na.strings = "", fileEncoding = "UTF-8-BOM")
tab <- subset(tab, countriesAndTerritories == "France")
tab$index <- nrow(tab):1
as.character(tab$dateRep[1])
idx <- tab$index[which(tab$dateRep == "17/03/2020")]
tab <- subset(tab, select = c("index","cases","deaths"))
tab <- melt(tab, id.vars = "index")
tab2 <- tab
tab2$variable <- paste0("log(1+",tab2$variable,")")
tab2$value <- log(1+tab2$value)
tab <- rbind(tab,tab2)
tab <- subset(tab, index >= 55)
deconf <- 131
tab <- subset(tab, tab$value > 0)
pFr <- ggplot(tab,aes(x=index, y=value)) +
facet_wrap(~ variable, scales = "free_y") +
geom_vline(xintercept = idx, linetype="dashed",col="grey") +
geom_vline(xintercept = idx + 21, linetype="dashed",col="grey") +
geom_vline(xintercept = deconf, linetype="dashed",col="grey") +
geom_vline(xintercept = deconf + 21, linetype="dashed",col="grey") +
geom_smooth(method="loess") +
geom_point() # +
# xlim(c(min(tab$index),135))
pFr
tab
subset(tab,variable=="deaths")
library(factoextra)
?fviz_cluster
library(ggplot2)
library(lme4)
ni <- c(n1 = 5, n2 = 7);  # Tailles des échantillons
n1 = ni[1];
n2 = ni[2];
# Création d'un jeu de données
Groupe <- c(rep(1,n1), rep(2,n2));
Cage <- c(rep(1,3),rep(2,2), rep(3,4),rep(4,3));
# Paramètres d'entrée
Sigma = 1;                   # Variance intra groupe
# Les mi
mu1 =0;
mu2 <- round(abs(rnorm(1)),1);
# Moyenne pas groupe
mi <- c(rep(mu1,n1),rep(mu2,n2));
# Les lj
l1 = 0; l2 <- round(abs(rnorm(1)),1); l3 <- round(abs(rnorm(1)),1); l4 <- round(abs(rnorm(1)),1);
# Moyenne par cage
lj=c(rep(l1,3),rep(l2,2), rep(l3,4),rep(l4,3));
# Valeurs simulées pour chacun des individus:
# Y = Moyenne des groupes + Moyenne des cages + bruit
eps <- rnorm(mi, sd = sqrt(Sigma));
X <- mi + eps;
# Valeurs simulées pour chacun des individus:
# Y = Moyenne des groupes + Moyenne des cages + bruit
eps <- rnorm(mi, sd = sqrt(Sigma));
Y <- mi + lj + eps;
# Tableau des données
tab <- data.frame(Groupe, Cage, mi, lj, eps, X, Y);
tab   # Affichage de résultat
#  Graphique
grp <- tab$Groupe; Y <- tab$Y; cage <- data$Cage;
#install.packages("lme4")
library(ggplot2)
library(lme4)
ni <- c(n1 = 5, n2 = 7);  # Tailles des échantillons
n1 = ni[1];
n2 = ni[2];
# Création d'un jeu de données
Groupe <- c(rep(1,n1), rep(2,n2));
Cage <- c(rep(1,3),rep(2,2), rep(3,4),rep(4,3));
# Paramètres d'entrée
Sigma = 1;                   # Variance intra groupe
# Les mi
mu1 =0;
mu2 <- round(abs(rnorm(1)),1);
# Moyenne pas groupe
mi <- c(rep(mu1,n1),rep(mu2,n2));
# Les lj
l1 = 0; l2 <- round(abs(rnorm(1)),1); l3 <- round(abs(rnorm(1)),1); l4 <- round(abs(rnorm(1)),1);
# Moyenne par cage
lj=c(rep(l1,3),rep(l2,2), rep(l3,4),rep(l4,3));
# Valeurs simulées pour chacun des individus:
# Y = Moyenne des groupes + Moyenne des cages + bruit
eps <- rnorm(mi, sd = sqrt(Sigma));
X <- mi + eps;
# Valeurs simulées pour chacun des individus:
# Y = Moyenne des groupes + Moyenne des cages + bruit
eps <- rnorm(mi, sd = sqrt(Sigma));
Y <- mi + lj + eps;
# Tableau des données
tab <- data.frame(Groupe, Cage, mi, lj, eps, X, Y);
tab   # Affichage de résultat
#  Graphique
grp <- tab$Groupe; Y <- tab$Y; cage <- data$Cage;
ggplot(data = data.frame(Y,grp,cage),aes(x=grp,y=Y, group=grp,color=cage)) + geom_boxplot() + geom_jitter(color="steelblue",width=0.05) +
xlab("Groupes") +
ylab("Y") +
scale_color_brewer(palette="Dark2") +
theme_classic()
#  Graphique
grp <- tab$Groupe; Y <- tab$Y; cage <- data$Cage;
data
head(data)
#  Graphique
grp <- tab$Groupe; Y <- tab$Y; cage <- tag$Cage;
#  Graphique
grp <- tab$Groupe; Y <- tab$Y; cage <- tab$Cage;
ggplot(data = data.frame(Y,grp,cage),aes(x=grp,y=Y, group=grp,color=cage)) + geom_boxplot() + geom_jitter(color="steelblue",width=0.05) +
xlab("Groupes") +
ylab("Y") +
scale_color_brewer(palette="Dark2") +
theme_classic()
ggplot(data = data.frame(Y,grp,cage),aes(x=grp,y=Y, group=grp,color=cage)) + geom_boxplot() + geom_jitter(width=0.05) +
xlab("Groupes") +
ylab("Y") +
scale_color_brewer(palette="Dark2") +
theme_classic()
ggplot(data = data.frame(Y,grp,cage),aes(x=grp,y=Y, group=grp,color=cage)) + geom_boxplot() + geom_jitter(width=0.05) +
xlab("Groupes") +
ylab("Y") +
# scale_color_brewer(palette="Dark2") +
theme_classic()
#  Graphique
grp <- tab$Groupe; Y <- tab$Y; cage <- factor(tab$Cage);
ggplot(data = data.frame(Y,grp,cage),aes(x=grp,y=Y, group=grp,color=cage)) + geom_boxplot() + geom_jitter(width=0.05) +
xlab("Groupes") +
ylab("Y") +
# scale_color_brewer(palette="Dark2") +
theme_classic()
l1
l2
l3
l4
m1m
m1
m2
mu1
mu2
#install.packages("lme4")
library(ggplot2)
library(lme4)
ni <- c(n1 = 5, n2 = 7);  # Tailles des échantillons
n1 = ni[1];
n2 = ni[2];
# Création d'un jeu de données
Groupe <- c(rep(1,n1), rep(2,n2));
Cage <- c(rep(1,3),rep(2,2), rep(3,4),rep(4,3));
# Paramètres d'entrée
Sigma = 1;                   # Variance intra groupe
# Les mi
mu1 =0;
mu2 <- round(abs(rnorm(1)),1);
# Moyenne pas groupe
mi <- c(rep(mu1,n1),rep(mu2,n2));
# Les lj
l1 = 0; l2 <- round(abs(rnorm(1)),1); l3 <- round(abs(rnorm(1)),1); l4 <- round(abs(rnorm(1)),1);
# Moyenne par cage
lj=c(rep(l1,3),rep(l2,2), rep(l3,4),rep(l4,3));
# Valeurs simulées pour chacun des individus:
# Y = Moyenne des groupes + Moyenne des cages + bruit
eps <- rnorm(mi, sd = sqrt(Sigma));
X <- mi + eps;
# Valeurs simulées pour chacun des individus:
# Y = Moyenne des groupes + Moyenne des cages + bruit
eps <- rnorm(mi, sd = sqrt(Sigma));
Y <- mi + lj + eps;
# Tableau des données
tab <- data.frame(Groupe, Cage, mi, lj, eps, X, Y);
tab   # Affichage de résultat
#  Graphique
grp <- tab$Groupe; Y <- tab$Y; cage <- data$Cage;
#  Graphique
grp <- tab$Groupe; Y <- tab$Y; cage <- tab$Cage;
ggplot(data = data.frame(Y,grp),aes(x=grp,y=Y, group=grp,color=cage)) +
geom_boxplot() +
geom_jitter(color="steelblue",width=0.05) +
xlab("Groupes") +
ylab("Y") +
theme_classic()
#  Graphique
grp <- tab$Groupe; X <- tab$X; cage <-tab$Cage;
data = data.frame(X,grp)
ggplot(data = data,aes(x=grp,y=X, group=grp,color=cage)) + geom_boxplot() + geom_jitter(color=c("steelblue"),width=0.05) +
xlab("Groupes") +
ylab("X") +
theme_classic()
head(tab)
ggplot(data = tab,aes(x=grp,y=Y, group=grp,color=factor(cage))) +
geom_boxplot() +
geom_jitter(width=0.05) +
xlab("Groupes") +
ylab("X") +
theme_classic()
ggplot(data = tab,aes(x=factor(grp),y=Y, group=grp,color=factor(cage))) +
geom_boxplot() +
geom_jitter(width=0.05) +
xlab("Groupes") +
ylab("X") +
theme_classic()
ggplot(data = tab,aes(x=factor(grp),y=Y, group=grp,color=factor(cage))) +
geom_boxplot() +
geom_jitter(width=0.05) +
xlab("Groupes") +
ylab("Y") +
theme_classic()
## Anova avec deux facteurs
Tab_Anova <- aov(X ~ factor(Cage)*factor(Groupe), data = tab );
Tab_Anova
mod <- lmer(Groupe ~ Cage + (1|Cage), data = tab); mod
#these libraries need to be loaded
library(utils)
library(ggplot2)
library(reshape2)
library(ggpubr)
theme_set(theme_light())
#read the Dataset sheet into “R”. The dataset will be called "data".
tab <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", na.strings = "", fileEncoding = "UTF-8-BOM")
tab <- subset(tab, countriesAndTerritories == "France")
tab$index <- nrow(tab):1
as.character(tab$dateRep[1])
idx <- tab$index[which(tab$dateRep == "17/03/2020")]
tab <- subset(tab, select = c("index","cases","deaths"))
tab <- melt(tab, id.vars = "index")
tab2 <- tab
tab2$variable <- paste0("log(1+",tab2$variable,")")
tab2$value <- log(1+tab2$value)
tab <- rbind(tab,tab2)
tab <- subset(tab, index >= 55)
deconf <- 131
tab <- subset(tab, tab$value > 0)
pFr <- ggplot(tab,aes(x=index, y=value)) +
facet_wrap(~ variable, scales = "free_y") +
geom_vline(xintercept = idx, linetype="dashed",col="grey") +
geom_vline(xintercept = idx + 21, linetype="dashed",col="grey") +
geom_vline(xintercept = deconf, linetype="dashed",col="grey") +
geom_vline(xintercept = deconf + 21, linetype="dashed",col="grey") +
geom_smooth(method="loess") +
geom_point() # +
# xlim(c(min(tab$index),135))
pFr
library(lmer)
library(lmerTest)
?gl
df <- data.frame(grp=gl(2,6,labels=c("A","B")))
df
cage = gl(4,3,labels=paste0("C",1:4))
df
df <- data.frame(grp=gl(2,6,labels=c("A","B")),
cage = gl(4,3,labels=paste0("C",1:4)))
library(lmer)
library(lmerTest)
df <- data.frame(grp=gl(2,6,labels=c("A","B")),
cage = gl(4,3,labels=paste0("C",1:4)))
library(lme4)
library(lmerTest)
df <- data.frame(grp=gl(2,6,labels=c("A","B")),
cage = gl(4,3,labels=paste0("C",1:4)))
df
library(lme4)
library(lmerTest)
df <- data.frame(grp=gl(2,6,labels=c("A","B")),
cage = gl(4,3,labels=paste0("C",1:4)),
m = c(rep(0,6),rep(rnorm(1),6)))
df
library(lme4)
library(lmerTest)
df <- data.frame(grp=gl(2,6,labels=c("A","B")),
cage = gl(4,3,labels=paste0("C",1:4)),
m = c(rep(0,6),rep(abs(rnorm(1)),6)),
l = c(rep(0,3),rep(abs(rnorm(1)),3),rep(abs(rnorm(1)),3),rep(abs(rnorm(1)),3)))
df
library(lme4)
library(lmerTest)
df <- data.frame(grp=gl(2,6,labels=c("A","B")),
cage = gl(4,3,labels=paste0("C",1:4)),
m = c(rep(0,6),rep(abs(rnorm(1)),6)),
l = c(rep(0,3),rep(abs(rnorm(1)),3),rep(abs(rnorm(1)),3),rep(abs(rnorm(1)),3)),
eps = rnorm(12,sd=0.8))
library(lme4)
library(lmerTest)
df <- data.frame(grp=gl(2,6,labels=c("A","B")),
cage = gl(4,3,labels=paste0("C",1:4)),
m = c(rep(0,6),rep(abs(rnorm(1)),6)),
l = c(rep(0,3),rep(abs(rnorm(1)),3),rep(abs(rnorm(1)),3),rep(abs(rnorm(1)),3)),
eps = rnorm(12,sd=0.8))
df$y <- df$m + df$l + df$eps
library(lme4)
library(lmerTest)
df <- data.frame(grp=gl(2,6,labels=c("A","B")),
cage = gl(4,3,labels=paste0("C",1:4)),
m = c(rep(0,6),rep(abs(rnorm(1)),6)),
l = c(rep(0,3),rep(abs(rnorm(1)),3),rep(abs(rnorm(1)),3),rep(abs(rnorm(1)),3)),
eps = rnorm(12,sd=0.8))
df$y <- df$m + df$l + df$eps
mod <- lmer(y ~ grp + (1|cage), data = df)
mod
nams(mod)
names(mod)
anova(mod)
#these libraries need to be loaded
library(utils)
library(ggplot2)
library(reshape2)
library(ggpubr)
theme_set(theme_light())
#read the Dataset sheet into “R”. The dataset will be called "data".
tab <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv",
na.strings = "",
fileEncoding = "UTF-8-BOM")
tab <- subset(tab, countriesAndTerritories == "France")
tab$index <- nrow(tab):1
as.character(tab$dateRep[1])
idx <- tab$index[which(tab$dateRep == "17/03/2020")]
tab <- subset(tab, select = c("index","cases","deaths"))
tab <- melt(tab, id.vars = "index")
tab2 <- tab
tab2$variable <- paste0("log(1+",tab2$variable,")")
tab2$value <- log(1+tab2$value)
tab <- rbind(tab,tab2)
tab <- subset(tab, index >= 55)
deconf <- 131
tab <- subset(tab, tab$value > 0)
pFr <- ggplot(tab,aes(x=index, y=value)) +
facet_wrap(~ variable, scales = "free_y") +
geom_vline(xintercept = idx, linetype="dashed",col="grey") +
geom_vline(xintercept = idx + 21, linetype="dashed",col="grey") +
geom_vline(xintercept = deconf, linetype="dashed",col="grey") +
geom_vline(xintercept = deconf + 21, linetype="dashed",col="grey") +
geom_smooth(method="loess") +
geom_point() # +
# xlim(c(min(tab$index),135))
pFr
head(tab)
tab
setwd("~/Documents/Pasteur/projets/perso/package/xLLiM/R")
setwd("~/Desktop/mycorona")
setwd("~/Documents/Pasteur/projets/perso/package/xLLiM")
library(devtools)
?install_github
devtools::install_github("epertham/xLLiM", branch="devel")
devtools::install_git("epertham/xLLiM", branch="devel")
devtools::install_git("epertham/xLLiM")
gh_install_packages("epertham/xLLiM", ref = "devel")
library(githubinstall)
install.packages("githubinstall")
library(githubinstall)
gh_install_packages("xLLiM", ref = "devel")
gh_install_packages("epertham/xLLiM", ref = "devel")
devtools::install_github("epertham/xLLiM")
library(xLLiM)
preprocess_data()
preprocess_data
rm(list=ls())
library(glmnet)
library(mclust)
library(progress)
library(ranger)
library(devtools)
setwd("~/Dropbox/GLLiM-shock/data_prot/")
devtools::install_github("epertham/xLLiM")
library(xLLiM)
#################################################
##### DATA
#################################################
load("WD_3.RData") # protein Water Deficit 3 pheno
########################################################
### Prediction (CV) and comparison to standard methods
########################################################
set.seed(388)
source('functions_cv_prediction.R')
kfc <- 10
#### Prediction by the mean
p.mean <- myKfoldcv(yapp,tapp,func = Mean_EP,Kfold=kfc,B=1)
#### LASSO
p.lasso <- myKfoldcv(yapp,tapp,func = lasso_EDm,Kfold=kfc,B=1)
#### BLLiM
p.bllim2<- myKfoldcv(yapp,tapp,func = bllim_CV,Kfold=kfc,B=1, K=2, alpha = 0.7, nfolds = 50)
### SVM
p.svm <- myKfoldcv(yapp,tapp,func = svm_EPm,Kfold=kfc,B=1)
################################################
################################################
#### FULL MODEL ################################
################################################
################################################
set.seed(388)
prep_data = preprocess_data(tapp,yapp,in_K = 2,alpha= 0.7,nfolds = 50)
mod.bllim2.tot <- bllim(t(tapp), t(yapp[,prep_data$selected.variables]), in_K=2,maxiter=100, in_r=list(R=prep_data$clusters),plot=FALSE,verb=FALSE)
mod.bllim2.tot$c
rm(list=ls())
library(glmnet)
library(mclust)
library(progress)
library(ranger)
library(devtools)
setwd("~/Dropbox/GLLiM-shock/data_prot/")
devtools::install_github("epertham/xLLiM")
library(xLLiM)
#################################################
##### DATA
#################################################
load("WD_3.RData") # protein Water Deficit 3 pheno
########################################################
### Prediction (CV) and comparison to standard methods
########################################################
set.seed(388)
source('functions_cv_prediction.R')
kfc <- 10
set.seed(388)
prep_data = preprocess_data(tapp,yapp,in_K = 2,alpha= 0.7,nfolds = 50)
mod.bllim2.tot <- bllim(t(tapp), t(yapp[,prep_data$selected.variables]), in_K=2,maxiter=100, in_r=list(R=prep_data$clusters),plot=FALSE,verb=FALSE)
mod.bllim2.tot$c
sessionInfo()
install.packages(c("ape", "backports", "boot", "broom", "bst", "car", "carData", "circlize", "class", "dbplyr", "DescTools", "dplyr", "DT", "elasticnet", "ellipse", "ellipsis", "emmeans", "fitdistrplus", "flextable", "future", "future.apply", "GetoptLong", "GGally", "ggfittext", "ggforce", "ggfortify", "ggplot2", "ggpubr", "ggraph", "git2r", "glmmML", "glmnet", "GlobalOptions", "glue", "gmm", "gower", "graphlayouts", "gss", "haven", "htmlTable", "htmltools", "httpuv", "isoband", "jomo", "KernSmooth", "knitr", "later", "lemon", "lubridate", "maptools", "MASS", "mda", "mice", "missMDA", "modelr", "MuMIn", "mvtnorm", "nlme", "nnet", "officer", "openxlsx", "partykit", "patchwork", "pillar", "pkgbuild", "pkgload", "PLNmodels", "plotrix", "polspline", "promises", "ps", "purrr", "RcppArmadillo", "RcppParallel", "RCurl", "recipes", "rematch2", "reticulate", "rex", "rgl", "rlang", "rmarkdown", "Rmixmod", "rms", "rmutil", "ROCR", "rversions", "scales", "Seurat", "shiny", "sn", "sp", "spatial", "SQUAREM", "survival", "systemfonts", "tibble", "tidygraph", "tidyr", "tidyselect", "tinytex", "umap", "usethis", "vctrs", "withr", "xfun", "xgboost", "xml2", "zoo"))
install.packages(c("ape", "backports", "boot", "broom", "bst", "car", "carData", "circlize", "class", "dbplyr", "DescTools", "dplyr", "DT", "elasticnet", "ellipse", "ellipsis", "emmeans", "fitdistrplus", "flextable", "future", "future.apply", "GetoptLong", "GGally", "ggfittext", "ggforce", "ggfortify", "ggplot2", "ggpubr", "ggraph", "git2r", "glmmML", "glmnet", "GlobalOptions", "glue", "gmm", "gower", "graphlayouts", "gss", "haven", "htmlTable", "htmltools", "httpuv", "isoband", "jomo", "KernSmooth", "knitr", "later", "lemon", "lubridate", "maptools", "MASS", "mda", "mice", "missMDA", "modelr", "MuMIn", "mvtnorm", "nlme", "nnet", "officer", "openxlsx", "partykit", "patchwork", "pillar", "pkgbuild", "pkgload", "PLNmodels", "plotrix", "polspline", "promises", "ps", "purrr", "RcppArmadillo", "RcppParallel", "RCurl", "recipes", "rematch2", "reticulate", "rex", "rgl", "rlang", "rmarkdown", "Rmixmod", "rms", "rmutil", "ROCR", "rversions", "scales", "Seurat", "shiny", "sn", "sp", "spatial", "SQUAREM", "survival", "systemfonts", "tibble", "tidygraph", "tidyr", "tidyselect", "tinytex", "umap", "usethis", "vctrs", "withr", "xfun", "xgboost", "xml2", "zoo"))
