strucSig <- list()
if (ncol(tapp) != ncol(yapp)) {stop("Observations must be in columns and variables in rows")}
# % ==========================EM initialization==============================
L=nrow(tapp)
D = nrow(yapp) ; N = ncol(yapp);
if (is.null(in_r)){
## Step 1 A)
if (verb) {print("Initialization ... ")}
## we perform 10 initialisations of the model
## with diagonal Sigma and keep the best initialisation to
r = emgm(as.matrix(rbind(tapp, yapp)), init=in_K, 1000, verb=0)
LLinit = sapply(1:20,function(it){
while (min(table(r$label)) < 2){
r = emgm(as.matrix(rbind(tapp, yapp)), init=in_K, 1000, verb=0)
}
modInit = gllim(as.matrix(tapp),as.matrix(yapp),in_K=in_K,in_r=r,cstr=list(Sigma="d"),verb=0,maxiter = 5)
return(list(r=r,LLinit=modInit$LLf))
})
## we select the model maximizing the logliklihood among the 10 models
## this model will be used in step 2
r = LLinit[1,][[which.max(unlist(LLinit[2,]))]]
} else {r=in_r}
## Step 1 B)
## using the best initialisation selected in step 1 "r"
## we rerun the model estimation "modInit"
## "modInit" is a glimm model with diagonale matrices cstr=list(Sigma="d")
modInit = gllim(as.matrix(tapp),as.matrix(yapp),in_K=in_K,in_r=r,cstr=list(Sigma="d"),verb=0,maxiter = 1000)
## save modInit for further
FinalModInit <- modInit
## STEP 2 INITIALIZATION Sigma_k
## construct the collection of block diagonal matrices for Sigma_k
## to get a first estimation of Sigma_k for k in 1,...,K
## based on the classification of observations obtained (modInit)
## STEP 2 A) we extract the classification of individuals (drosophiles) based on the modInit
affecIndModInit = sapply(1:N,function(i)which.max(modInit$r[i,]))
## STEP 2 B) we compute full sigma_k (the covariance associated to the noise)
## for each group of individuals
listKfullSigma = lapply(1:in_K,function(dum){
tmp = cov(t(yapp[,affecIndModInit==dum]))-as.matrix(modInit$A[,,dum])%*%modInit$Gamma[,,dum]%*%t(as.matrix(modInit$A[,,dum]))
return(tmp )
})
## List of K matrices with full matrix
## optional plot of estimated matrix Sigma
## lapply(listKfullSigma,image.plot)
## lapply(listKfullSigma,hist)
if (verb) {print("Building model collection ... ")}
## STEP 2 C) we threshold each Sigma_k from Sigma_k full to diagonal
## partsSparseSig is a list of size K of matrix (N_struc x D) that contain in each row a partition
## of variables obtained by threshold of the matrix Sigma_k
partsSparseSig = lapply(listKfullSigma,function(x) do.call(rbind,thresholdAbsSPath2(cov2cor(x))$partitionList))
## We clean each matrix to suprress extra complex models
partsSparseSig = lapply(partsSparseSig,function(x) x[(nrow(x)-min(sapply(partsSparseSig,nrow))+1):nrow(x),])
# print(nrow(partsSparseSig[[1]]))
## STEP 3 : Compute Glimm-shock model
## it initizalizes the count of the number of model
it = 0
## LL will contain the log-likelihood for each partition of Sigma_k
## (ED) for each model or for each partition of Sigma_k ? Pour moi le dernier veut dire qu'on a un vecteur de taille K
LL = rep(0,nrow(partsSparseSig[[1]]))
## nbpar will contain the total number of parameters for each partition of Sigma_k
nbpar = rep(0,nrow(partsSparseSig[[1]]))
## save the number of obs in each cluster, used for cleaning after
effectifs = matrix(0,nrow=in_K,ncol=nrow(partsSparseSig[[1]]))
## save the size of the largest clique for each partition
Pg  = matrix(0,nrow=in_K,ncol=nrow(partsSparseSig[[1]]))
## Collect the corresponding estimated glimm model with shock
modelSparSig <- list()
## Collect the corresponding partition used to estimate glimm model with shock
strucSig <- list()
nrow(partsSparseSig[[1]])
source('~/Documents/postdoc/programmation/package/xLLiM/R/bllim.R')
for (kfold in 1:Kfold){
# kfold = 1
print(paste0("Fold number: ",kfold))
foldid = fold_list[,kfold]
#
trainy = expressions[,-foldid]
trainx = pheno[,-foldid,drop=FALSE]
testy = expressions[,foldid,drop=FALSE]
testx = pheno[,foldid,drop=FALSE]
dim(trainx)
dim(trainy)
dim(testx)
dim(testy)
## number of mixture components in models
K <- 4
## Run BLLiM
tapp = trainx ; yapp = as.matrix(trainy) ; in_r = NULL ; in_K = K ; verb=1
mod = bllim(trainx,as.matrix(trainy),in_r=NULL,in_K=K,verb=1)
pred = gllim_inverse_map(as.matrix(testy),mod)$x_exp
mseBLLiM[foldid,] = (pred - testx)^2
# Other methods
trainx = t(trainx)
trainy = t(trainy)
testy = t(testy)
testx = t(testx)
if (L == 1){
mseRF[foldid,] = (randomForest_EP(trainx,trainy,testx,testy))
mseMARS[foldid,] = (mars_EP(trainx,trainy,testx,testy))
mseSVM[foldid,] = (svm_EP(trainx,trainy,testx,testy,kernel="radial"))
mseSIR[foldid,] = (sir_EP(trainx,trainy,testx,testy,2))
mseRVM[foldid,] = (rvm_EP(trainx,trainy,testx,testy,kernel="vanilladot"))
msePLS[foldid,] = (PLS_EP(trainx,trainy,testx,testy))
mseFOOL[foldid,] = ((matrix(colMeans(trainx),ncol=L,nrow=length(foldid),byrow=TRUE) - testx)^2)
} else {
mseMARS[foldid,] = (mars_EP(trainx,trainy,testx,testy))
mseSIR[foldid,] = (sir_EP(trainx,trainy,testx,testy,2))
mseFOOL[foldid,] = ((matrix(colMeans(trainx),ncol=L,nrow=length(foldid),byrow=TRUE) - testx)^2)
}
}
warnings()
colMeans(mseBLLiMlist[[1]])
colMeans(mseRFlist[[1]])
colMeans(mseMARSlist[[1]])
colMeans(mseSVMlist[[1]])
colMeans(mseSIRlist[[1]])
colMeans(mseRVMlist[[1]])
colMeans(msePLSlist[[1]])
colMeans(mseFOOLlist[[1]])
mseBLLiMlist[[run]] <- mseBLLiM
mseRFlist[[run]] <- mseRF
mseMARSlist[[run]] <- mseMARS
mseSVMlist[[run]] <- mseSVM
mseSIRlist[[run]] <- mseSIR
mseRVMlist[[run]] <- mseRVM
msePLSlist[[run]] <- msePLS
mseFOOLlist[[run]] <- mseFOOL
colMeans(mseBLLiMlist[[1]])
colMeans(mseRFlist[[1]])
colMeans(mseMARSlist[[1]])
colMeans(mseSVMlist[[1]])
colMeans(mseSIRlist[[1]])
colMeans(mseRVMlist[[1]])
colMeans(msePLSlist[[1]])
colMeans(mseFOOLlist[[1]])
#######################
## loading useful packages and functions
#######################
rm(list=ls())
remove.packages("xLLiM")
install.packages("~/Documents/postdoc/programmation/package/xLLiM_2.0.tar.gz",type="source",repos=NULL)
library(xLLiM)
# setwd("~/Documents/postdoc/programmation/package/xLLiM/R/")
# library(igraph);library(capushe);library(abind);library(corpcor);library(Matrix)
# sapply(list.files(),source)
source("~/Dropbox/GLLiM-shock/essai CV donnees reelles/functions/list_compared_methods.R")
#######################
## data preparation
#######################
load("~/Dropbox/GLLiM-shock/phenotype_atester/DGRPdata_var4000_benz.RData")
# pheno1 = pheno
# load("~/Dropbox/GLLiM-shock/phenotype_atester/OLFACTORY_BEHAVIOR/DGRPdata_var4000_acetophenone.RData")
# #### CHOISIE AU HASARD
# pheno2 = pheno
# pheno = rbind(pheno1,pheno2)
# dim(pheno)
## Si univarie
pheno = matrix(pheno,ncol=length(pheno))
N = ncol(mouchesExp)
#######################
## Filtering
#######################
imp = matrix(0,nrow(mouchesExp),ncol=nrow(pheno))
for (i in 1:nrow(mouchesExp)){ if (!(i %% 1000)) {print(i)}
imp[i,] = apply(pheno,1,function(x){
dta = data.frame(x,exp=unlist(mouchesExp[i,]))
mod = loess(x ~ exp,data=dta)
return(mean(mod$residuals^2))
})
}
#######################
## loading useful packages and functions
#######################
rm(list=ls())
# remove.packages("xLLiM")
# install.packages("~/Documents/postdoc/programmation/package/xLLiM_2.0.tar.gz",type="source",repos=NULL)
# library(xLLiM)
setwd("~/Documents/postdoc/programmation/package/xLLiM/R/")
library(igraph);library(capushe);library(abind);library(corpcor);library(Matrix)
sapply(list.files(),source)
source("~/Dropbox/GLLiM-shock/essai CV donnees reelles/functions/list_compared_methods.R")
#######################
## data preparation
#######################
load("~/Dropbox/GLLiM-shock/phenotype_atester/DGRPdata_var4000_benz.RData")
# pheno1 = pheno
# load("~/Dropbox/GLLiM-shock/phenotype_atester/OLFACTORY_BEHAVIOR/DGRPdata_var4000_acetophenone.RData")
# #### CHOISIE AU HASARD
# pheno2 = pheno
# pheno = rbind(pheno1,pheno2)
# dim(pheno)
## Si univarie
pheno = matrix(pheno,ncol=length(pheno))
N = ncol(mouchesExp)
#######################
## Filtering
#######################
imp = matrix(0,nrow(mouchesExp),ncol=nrow(pheno))
for (i in 1:nrow(mouchesExp)){ if (!(i %% 1000)) {print(i)}
imp[i,] = apply(pheno,1,function(x){
dta = data.frame(x,exp=unlist(mouchesExp[i,]))
mod = loess(x ~ exp,data=dta)
return(mean(mod$residuals^2))
})
}
R2multi = sapply(1:ncol(imp),function(i){
R2 = 1 - (N/(N-1)) * imp[,i]/var(pheno[i,])
sqrtR2 = sqrt(R2)
return(sqrtR2)
})
sortedR2multi = apply(R2multi,2,sort,decreasing=TRUE)
#### TOUTE CETTE PARTIE EST A AUTOMATISER
matplot(sortedR2multi,type="p",pch=16,col="grey")
abline(h=0.24,lwd=2,col="blue")
### Je prends les premiers mais il faut affiner ce choix
idx = apply(R2multi,2,function(x) order(x,decreasing=TRUE)[1:50])
length(unique(unlist(idx)))
##### TOUTE CETTE PARTIE EST A AUTOMATISER
## format expression data
expressions <- mouchesExp[sort(unique(unlist(idx))),]
dim(expressions)
## extract datasets sizes
N  <-  dim(expressions)[2]
L  <-  dim(pheno)[1]
D  <-  dim(expressions)[1]
print(paste0("N=",N," L=",L," D=",D))
#######
### DEBUT CV
#######
### Run 10 times  the Kfold-fold CV
mseBLLiMlist <- mseRFlist <- mseMARSlist <- mseSIRlist <- mseSVMlist <- mseRVMlist <- mseFOOLlist <- msePLSlist <- list()
for (run in 1:2){print(paste0("Run number:",run))
## Beginning of CV
Kfold = 10
fold = sample(1:N,N,replace=FALSE)
fold = c(fold,sample(1:N,10 - N %% Kfold))
fold_list = matrix(fold,ncol=Kfold)
mseBLLiM <- mseRF <- mseMARS <- mseSIR <- mseSVM <- mseRVM <- mseFOOL <- msePLS <- matrix(0,nrow=N,ncol=L)
for (kfold in 1:Kfold){
# kfold = 1
print(paste0("Fold number: ",kfold))
foldid = fold_list[,kfold]
#
trainy = expressions[,-foldid]
trainx = pheno[,-foldid,drop=FALSE]
testy = expressions[,foldid,drop=FALSE]
testx = pheno[,foldid,drop=FALSE]
dim(trainx)
dim(trainy)
dim(testx)
dim(testy)
## number of mixture components in models
K <- 4
## Run BLLiM
tapp = trainx ; yapp = as.matrix(trainy) ; in_r = NULL ; in_K = K ; verb=1
mod = bllim(trainx,as.matrix(trainy),in_r=NULL,in_K=K,verb=1)
pred = gllim_inverse_map(as.matrix(testy),mod)$x_exp
mseBLLiM[foldid,] = (pred - testx)^2
# Other methods
trainx = t(trainx)
trainy = t(trainy)
testy = t(testy)
testx = t(testx)
if (L == 1){
mseRF[foldid,] = (randomForest_EP(trainx,trainy,testx,testy))
mseMARS[foldid,] = (mars_EP(trainx,trainy,testx,testy))
mseSVM[foldid,] = (svm_EP(trainx,trainy,testx,testy,kernel="radial"))
mseSIR[foldid,] = (sir_EP(trainx,trainy,testx,testy,2))
mseRVM[foldid,] = (rvm_EP(trainx,trainy,testx,testy,kernel="vanilladot"))
msePLS[foldid,] = (PLS_EP(trainx,trainy,testx,testy))
mseFOOL[foldid,] = ((matrix(colMeans(trainx),ncol=L,nrow=length(foldid),byrow=TRUE) - testx)^2)
} else {
mseMARS[foldid,] = (mars_EP(trainx,trainy,testx,testy))
mseSIR[foldid,] = (sir_EP(trainx,trainy,testx,testy,2))
mseFOOL[foldid,] = ((matrix(colMeans(trainx),ncol=L,nrow=length(foldid),byrow=TRUE) - testx)^2)
}
}
mseBLLiMlist[[run]] <- mseBLLiM
mseRFlist[[run]] <- mseRF
mseMARSlist[[run]] <- mseMARS
mseSVMlist[[run]] <- mseSVM
mseSIRlist[[run]] <- mseSIR
mseRVMlist[[run]] <- mseRVM
msePLSlist[[run]] <- msePLS
mseFOOLlist[[run]] <- mseFOOL
}
warnings()
##########
run = 1
colMeans(mseBLLiMlist[[run]])
colMeans(mseRFlist[[run]])
colMeans(mseMARSlist[[run]])
colMeans(mseSVMlist[[run]])
colMeans(mseSIRlist[[run]])
colMeans(mseRVMlist[[run]])
colMeans(msePLSlist[[run]])
colMeans(mseFOOLlist[[run]])
run = 1
colMeans(mseBLLiMlist[[run]])
colMeans(mseRFlist[[run]])
colMeans(mseMARSlist[[run]])
colMeans(mseSVMlist[[run]])
colMeans(mseSIRlist[[run]])
colMeans(mseRVMlist[[run]])
colMeans(msePLSlist[[run]])
colMeans(mseFOOLlist[[run]])
##########
run = 2
colMeans(mseBLLiMlist[[run]])
colMeans(mseRFlist[[run]])
colMeans(mseMARSlist[[run]])
colMeans(mseSVMlist[[run]])
colMeans(mseSIRlist[[run]])
colMeans(mseRVMlist[[run]])
colMeans(msePLSlist[[run]])
colMeans(mseFOOLlist[[run]])
load("~/Dropbox/GLLiM-shock/phenotype_atester/OLFACTORY_BEHAVIOR/DGRPdata_var4000_benzaldehyde.RData")
#######################
## loading useful packages and functions
#######################
rm(list=ls())
remove.packages("xLLiM")
install.packages("~/Documents/postdoc/programmation/package/xLLiM_2.0.tar.gz",type="source",repos=NULL)
library(xLLiM)
# setwd("~/Documents/postdoc/programmation/package/xLLiM/R/")
# library(igraph);library(capushe);library(abind);library(corpcor);library(Matrix)
# sapply(list.files(),source)
source("~/Dropbox/GLLiM-shock/essai CV donnees reelles/functions/list_compared_methods.R")
#######################
## data preparation
#######################
# load("~/Dropbox/GLLiM-shock/phenotype_atester/DGRPdata_var4000_benz.RData")
load("~/Dropbox/GLLiM-shock/phenotype_atester/OLFACTORY_BEHAVIOR/DGRPdata_var4000_benzaldehyde.RData")
# pheno1 = pheno
# load("~/Dropbox/GLLiM-shock/phenotype_atester/OLFACTORY_BEHAVIOR/DGRPdata_var4000_acetophenone.RData")
# #### CHOISIE AU HASARD
# pheno2 = pheno
# pheno = rbind(pheno1,pheno2)
# dim(pheno)
## Si univarie
pheno = matrix(pheno,ncol=length(pheno))
N = ncol(mouchesExp)
#######################
## Filtering
#######################
imp = matrix(0,nrow(mouchesExp),ncol=nrow(pheno))
for (i in 1:nrow(mouchesExp)){ if (!(i %% 1000)) {print(i)}
imp[i,] = apply(pheno,1,function(x){
dta = data.frame(x,exp=unlist(mouchesExp[i,]))
mod = loess(x ~ exp,data=dta)
return(mean(mod$residuals^2))
})
}
R2multi = sapply(1:ncol(imp),function(i){
R2 = 1 - (N/(N-1)) * imp[,i]/var(pheno[i,])
sqrtR2 = sqrt(R2)
return(sqrtR2)
})
sortedR2multi = apply(R2multi,2,sort,decreasing=TRUE)
#### TOUTE CETTE PARTIE EST A AUTOMATISER
matplot(sortedR2multi,type="p",pch=16,col="grey")
abline(h=0.24,lwd=2,col="blue")
### Je prends les premiers mais il faut affiner ce choix
idx = apply(R2multi,2,function(x) order(x,decreasing=TRUE)[1:50])
length(unique(unlist(idx)))
##### TOUTE CETTE PARTIE EST A AUTOMATISER
## format expression data
expressions <- mouchesExp[sort(unique(unlist(idx))),]
dim(expressions)
## extract datasets sizes
N  <-  dim(expressions)[2]
L  <-  dim(pheno)[1]
D  <-  dim(expressions)[1]
print(paste0("N=",N," L=",L," D=",D))
#######
### DEBUT CV
#######
### Run 10 times  the Kfold-fold CV
mseBLLiMlist <- mseRFlist <- mseMARSlist <- mseSIRlist <- mseSVMlist <- mseRVMlist <- mseFOOLlist <- msePLSlist <- list()
for (run in 1:2){print(paste0("Run number:",run))
## Beginning of CV
Kfold = 10
fold = sample(1:N,N,replace=FALSE)
fold = c(fold,sample(1:N,10 - N %% Kfold))
fold_list = matrix(fold,ncol=Kfold)
mseBLLiM <- mseRF <- mseMARS <- mseSIR <- mseSVM <- mseRVM <- mseFOOL <- msePLS <- matrix(0,nrow=N,ncol=L)
for (kfold in 1:Kfold){
# kfold = 1
print(paste0("Fold number: ",kfold))
foldid = fold_list[,kfold]
#
trainy = expressions[,-foldid]
trainx = pheno[,-foldid,drop=FALSE]
testy = expressions[,foldid,drop=FALSE]
testx = pheno[,foldid,drop=FALSE]
dim(trainx)
dim(trainy)
dim(testx)
dim(testy)
## number of mixture components in models
K <- 4
## Run BLLiM
tapp = trainx ; yapp = as.matrix(trainy) ; in_r = NULL ; in_K = K ; verb=1
mod = bllim(trainx,as.matrix(trainy),in_r=NULL,in_K=K,verb=1)
pred = gllim_inverse_map(as.matrix(testy),mod)$x_exp
mseBLLiM[foldid,] = (pred - testx)^2
# Other methods
trainx = t(trainx)
trainy = t(trainy)
testy = t(testy)
testx = t(testx)
if (L == 1){
mseRF[foldid,] = (randomForest_EP(trainx,trainy,testx,testy))
mseMARS[foldid,] = (mars_EP(trainx,trainy,testx,testy))
mseSVM[foldid,] = (svm_EP(trainx,trainy,testx,testy,kernel="radial"))
mseSIR[foldid,] = (sir_EP(trainx,trainy,testx,testy,2))
mseRVM[foldid,] = (rvm_EP(trainx,trainy,testx,testy,kernel="vanilladot"))
msePLS[foldid,] = (PLS_EP(trainx,trainy,testx,testy))
mseFOOL[foldid,] = ((matrix(colMeans(trainx),ncol=L,nrow=length(foldid),byrow=TRUE) - testx)^2)
} else {
mseMARS[foldid,] = (mars_EP(trainx,trainy,testx,testy))
mseSIR[foldid,] = (sir_EP(trainx,trainy,testx,testy,2))
mseFOOL[foldid,] = ((matrix(colMeans(trainx),ncol=L,nrow=length(foldid),byrow=TRUE) - testx)^2)
}
}
mseBLLiMlist[[run]] <- mseBLLiM
mseRFlist[[run]] <- mseRF
mseMARSlist[[run]] <- mseMARS
mseSVMlist[[run]] <- mseSVM
mseSIRlist[[run]] <- mseSIR
mseRVMlist[[run]] <- mseRVM
msePLSlist[[run]] <- msePLS
mseFOOLlist[[run]] <- mseFOOL
}
setwd("~/Documents/postdoc/programmation/package/xLLiM/R/")
library(igraph);library(capushe);library(abind);library(corpcor);library(Matrix)
sapply(list.files(),source)
mseBLLiMlist <- mseRFlist <- mseMARSlist <- mseSIRlist <- mseSVMlist <- mseRVMlist <- mseFOOLlist <- msePLSlist <- list()
for (run in 1:2){print(paste0("Run number:",run))
## Beginning of CV
Kfold = 10
fold = sample(1:N,N,replace=FALSE)
fold = c(fold,sample(1:N,10 - N %% Kfold))
fold_list = matrix(fold,ncol=Kfold)
mseBLLiM <- mseRF <- mseMARS <- mseSIR <- mseSVM <- mseRVM <- mseFOOL <- msePLS <- matrix(0,nrow=N,ncol=L)
for (kfold in 1:Kfold){
# kfold = 1
print(paste0("Fold number: ",kfold))
foldid = fold_list[,kfold]
#
trainy = expressions[,-foldid]
trainx = pheno[,-foldid,drop=FALSE]
testy = expressions[,foldid,drop=FALSE]
testx = pheno[,foldid,drop=FALSE]
dim(trainx)
dim(trainy)
dim(testx)
dim(testy)
## number of mixture components in models
K <- 4
## Run BLLiM
tapp = trainx ; yapp = as.matrix(trainy) ; in_r = NULL ; in_K = K ; verb=1
mod = bllim(trainx,as.matrix(trainy),in_r=NULL,in_K=K,verb=1)
pred = gllim_inverse_map(as.matrix(testy),mod)$x_exp
mseBLLiM[foldid,] = (pred - testx)^2
# Other methods
trainx = t(trainx)
trainy = t(trainy)
testy = t(testy)
testx = t(testx)
if (L == 1){
mseRF[foldid,] = (randomForest_EP(trainx,trainy,testx,testy))
mseMARS[foldid,] = (mars_EP(trainx,trainy,testx,testy))
mseSVM[foldid,] = (svm_EP(trainx,trainy,testx,testy,kernel="radial"))
mseSIR[foldid,] = (sir_EP(trainx,trainy,testx,testy,2))
mseRVM[foldid,] = (rvm_EP(trainx,trainy,testx,testy,kernel="vanilladot"))
msePLS[foldid,] = (PLS_EP(trainx,trainy,testx,testy))
mseFOOL[foldid,] = ((matrix(colMeans(trainx),ncol=L,nrow=length(foldid),byrow=TRUE) - testx)^2)
} else {
mseMARS[foldid,] = (mars_EP(trainx,trainy,testx,testy))
mseSIR[foldid,] = (sir_EP(trainx,trainy,testx,testy,2))
mseFOOL[foldid,] = ((matrix(colMeans(trainx),ncol=L,nrow=length(foldid),byrow=TRUE) - testx)^2)
}
}
mseBLLiMlist[[run]] <- mseBLLiM
mseRFlist[[run]] <- mseRF
mseMARSlist[[run]] <- mseMARS
mseSVMlist[[run]] <- mseSVM
mseSIRlist[[run]] <- mseSIR
mseRVMlist[[run]] <- mseRVM
msePLSlist[[run]] <- msePLS
mseFOOLlist[[run]] <- mseFOOL
}
##########
run = 1
colMeans(mseBLLiMlist[[run]])
colMeans(mseRFlist[[run]])
colMeans(mseMARSlist[[run]])
colMeans(mseSVMlist[[run]])
colMeans(mseSIRlist[[run]])
colMeans(mseRVMlist[[run]])
colMeans(msePLSlist[[run]])
colMeans(mseFOOLlist[[run]])
run = 2
colMeans(mseBLLiMlist[[run]])
colMeans(mseRFlist[[run]])
colMeans(mseMARSlist[[run]])
colMeans(mseSVMlist[[run]])
colMeans(mseSIRlist[[run]])
colMeans(mseRVMlist[[run]])
colMeans(msePLSlist[[run]])
colMeans(mseFOOLlist[[run]])
