Maximization_hybrid = function(tapp,yapp,r,u,phi,muw,Sw,mahalt,mahaly,cstr,verb){#
    if(verb>=1) print('  M'); #
    if(verb>=3) print(' k='); #
    K = ncol(r);#
    D = nrow(yapp);N=ncol(yapp)#
	Lt = nrow(tapp)#
	Lw = ifelse(is.null(muw),0,nrow(muw))#
    L=Lt+Lw;#
    th = list()#
    th$c=matrix(NaN,nrow=L,ncol=K)#
    th$Gamma=array(0,dim=c(L,L,K));#
    if(Lw>0)#
        {th$c[(Lt+1):L,]=cstr$cw; #% LwxK#
        th$Gamma[(Lt+1):L,(Lt+1):L,]=cstr$Gammaw;} #% LwxLwxK}#
    ph$pi=rep(NaN,K);    #
    th$A=array(NaN,dim=c(D,L,K));#
    th$b=matrix(NaN,nrow=D,ncol=K);#
    th$Sigma= array(NaN,dim=c(D,D,K));  #
#
    rk_bar=rep(0,K);#
    for (k in 1:K){#
        if(verb>=3) print(k);    #
      #  % Posteriors' sums#
        rk=r[,k]; #% 1xN         #
        rk_bar[k]=sum(rk); #% 1x1#
#
		uk=u[,k];  #% 1xN#
		rk_tilde = rk * uk;#
		rk_bar_tilde = sum(rk_tilde);#
        if(Lt>0)#
           {#
           	if(verb>=3) {print('c');}#
            #% Compute optimal mean ctk  #
            if(is.null(cstr$ct))#
                {th$c[1:Lt,k]=rowSums(sweep(tapp,2, rk_tilde,"*"))/rk_bar_tilde[k];}# % Ltx1 #
            else {th$c[1:Lt,k]=cstr$ct[,k];}#
			#% Compute optimal covariance matrix Gammatk#
            if(verb>=3) {print('Gt');}#
            diffGamma= sweep(sweep(tapp,1,th$c[1:Lt,k],"-"),2,sqrt(rk_tilde),"*");    #% LtxN #
            if( is.null(cstr$Gammat) || (length(cstr$Gammat)==1 & cstr$Gammat=='*')) # | ou ||?#
               # %%%% Full Gammat#
                {th$Gamma[1:Lt,1:Lt,k]=tcrossprod(diffGamma)/rk_bar[k]; #% DxD#
                }#th$Gamma[1:Lt,1:Lt,k]=th$Gamma[1:Lt,1:Lt,k];                    #
            else#
            	{#
            		if( !is.character(cstr$Gammat))#
                #%%%% Fixed Gammat#
                {th$Gamma[1:Lt,1:Lt,k]=cstr$Gammat[,,k];  }          #
            		else#
            			{#
            			if(cstr$Gammat[1]=='d' | cstr$Gammat[1]=='i')#
	                		#% Diagonal terms   #
		                {gamma2=rowSums(diffGamma^2)/rk_bar[k]; #%Ltx1#
		                if(cstr$Gammat[1]=='d')#
		                    #%%% Diagonal Gamma#
		                    {th$Gamma[1:Lt,1:Lt,k]=diag(gamma2);} #% LtxLt  #
		                else#
		                    #%%% Isotropic Gamma#
		                    {th$Gamma[1:Lt,1:Lt,k]=mean(gamma2)*diag(Lt);} #% LtxLt#
	                		}#
            			else#
		            		{if(cstr$Gammat[1]=='v')#
		                #%%%% Full Gamma#
		                {th$Gamma[1:Lt,1:Lt,k]=tcrossprod(diffGamma)/rk_bar[k];} #% LtxLt#
		            		else {# cstr$Gammat,#
		                stop('  ERROR: invalid constraint on Gamma.'); }#
	                		}#
            		}#
			}				#
           }   #
		#% Compute optimal weight pik#
		ph$pi[k]=rk_bar[k]/N; #% 1x1#
#
        if(Lw>0)#
            {x=rbind(tapp,muw[,,k]); #% LxN      #
		Skx=rbind(cbind(matrix(0,Lt,Lt),matrix(0,Lt,Lw)),cbind(matrix(0,Lw,Lt),Sw[,,k])); }#% LxL    #
        else#
            {x=tapp; #% LtxN#
            Skx=matrix(0,Lt,Lt);} #%LtxLt#
#
        if(verb>=3) {print('A');}#
        if(is.null(cstr$b))#
            {# % Compute weighted means of y and x#
            yk_bar=rowSums(sweep(yapp,2,rk_tilde,"*"))/rk_bar_tilde; #% Dx1#
            if(L>0)#
                xk_bar= rowSums(sweep(x,2, rk_tilde,"*"))/rk_bar_tilde #% Lx1#
            else#
                {xk_bar=NULL;}#
            }#
        else#
            {yk_bar=cstr$b[,k];#
            xk_bar=rep(0,L);#
            th$b[,k]=cstr$b[,k]; #
            } #
		#% Compute weighted, mean centered y and x#
		weights=sqrt(rk_tilde)/sqrt(rk_bar[k]); #% 1xN  #
        y_stark=sweep(yapp,1,yk_bar,"-"); #% DxN #col or row? #
        y_stark= sweep(y_stark,2,weights,"*"); #% DxN  #col or row?     #
        if(L>0)#
           { x_stark=sweep(x,1,xk_bar,"-"); #% LxN  #
            x_stark= sweep(x_stark,2,weights,"*"); #% LxN#
            }            #
        else#
            {x_stark=NULL;}#
       # % Robustly compute optimal transformation matrix Ak#
       # warning off MATLAB:nearlySingularMatrix;#
if(!all(Skx==0)) #
            {if(N>=L & det(Skx+tcrossprod(x_stark))>10^(-8))#
                {th$A[,,k]=tcrossprod(y_stark,x_stark)%*%solve(Skx+tcrossprod(x_stark));} #% DxL#
            else#
                {th$A[,,k]=tcrossprod(y_stark,x_stark)%*%ginv(Skx+tcrossprod(x_stark));} #%DxL#
            }#
        else#
        		{if(!all(x_stark==0))#
	            {if(N>=L & det(tcrossprod(x_stark))>10^(-8))#
	               {th$A[,,k]=tcrossprod(y_stark,x_stark)%*% solve(tcrossprod(x_stark));} #% DxL#
	            else#
		            {if(N<L && det(crossprod(x_stark))>10^(-8)) #
		               {th$A[,,k]=y_stark %*% solve(crossprod(x_stark)) %*% t(x_stark);} #% DxL#
		            else#
		                {if(verb>=3) print('p') #
		                th$A[,,k]=y_stark %*% ginv(x_stark);}  #% DxL#
		            }}#
       		 else#
            {#% Correspond to null variance in cluster k or L=0:#
            if(verb>=1 & L>0) print('null var\n');#
            th$A[,,k]=0; # % DxL#
            }#
			} #
        if(verb>=3)print('b'); #
       # % Intermediate variable wk=y-Ak*x#
        if(L>0)#
            {wk=yapp-th$A[,,k]%*%x;} #% DxN #attention au reshape? #
        else#
            {wk=yapp;}#
#
        #% Compute optimal transformation vector bk#
        if(is.null(cstr$b))#
            th$b[,k]=rowSums(sweep(wk,2,rk_tilde,"*"))/rk_bar_tilde; #% Dx1 #col ou row?#
        if(verb>=3) print('S');#
        #% Compute optimal covariance matrix Sigmak#
        if(Lw>0)#
           { Awk=th$A[,(Lt+1):L,k];#
            Swk=Sw[,,k];                #
            ASAwk=Awk%*%tcrossprod(Swk,Awk);}#
        else#
            ASAwk=0;#
#
        diffSigma=sweep(sweep(wk,1,th$b[,k],"-"),2,sqrt(rk_tilde),"*"); #%DxN#
        if (cstr$Sigma %in% c("","*")) #
            {#%%%% Full Sigma  #
            th$Sigma[,,k]=tcrossprod(diffSigma)/rk_bar[k]; #% DxD#
            th$Sigma[,,k]=th$Sigma[,,k]+ASAwk;  }                  #
        else #
        {#
	        	if(!is.character(cstr$Sigma))#
	            #%%%% Fixed Sigma#
	            {th$Sigma=cstr$Sigma;}#
	        else {#
		        		if(cstr$Sigma[1]=='d' || cstr$Sigma[1]=='i')#
		            #% Diagonal terms   #
		            {sigma2=rowSums(diffSigma^2)/rk_bar[k]; #%Dx1#
			            if(cstr$Sigma[1]=='d')#
			                {#%%% Diagonal Sigma#
			                th$Sigma[,,k]=diag(sigma2,ncol=D,nrow=D); #% DxD#
			                	if (is.null(dim(ASAwk))) {th$Sigma[,,k]=th$Sigma[,,k] + diag(ASAwk,ncol=D,nrow=D)}#
			                		else {th$Sigma[,,k]=th$Sigma[,,k]+diag(diag(ASAwk));}    #
			                }            #
			            else#
			                {#%%% Isotropic Sigma#
			                th$Sigma[,,k]=mean(sigma2)*diag(D); #% DxD#
			                		if (is.null(dim(ASAwk))) {th$Sigma[,,k]=th$Sigma[,,k]+sum(diag(ASAwk,ncol=D,nrow=D))/D*diag(D);}#
			                		else {th$Sigma[,,k]=th$Sigma[,,k]+sum(diag(ASAwk))/D*diag(D);}#
			                }  #
		             }                       #
			else {	cstr$Sigma ;#
			            stop('  ERROR: invalid constraint on Sigma.');}#
					}#
				}#
		#% Avoid numerical problems on covariances:#
         if(verb>=3) print('n');#
        if(! is.finite(sum(th$Gamma[1:Lt,1:Lt,k]))) {th$Gamma[1:Lt,1:Lt,k]=0;}#
        th$Gamma[1:Lt,1:Lt,k]=th$Gamma[1:Lt,1:Lt,k]+1e-8*diag(Lt);#
        if(! is.finite(sum(th$Sigma[,,k]))) {th$Sigma[,,k]=0;}#
        th$Sigma[,,k]=th$Sigma[,,k]+1e-8*diag(D);#
        if(verb>=3) print(',');#
    } #
    if(verb>=3) print('end');#
#
    if (cstr$Sigma=="*")#
        {#%%% Equality constraint on Sigma#
        th$Sigma=sweep(th$Sigma ,3,rk_bar,"*"); #
        th$Sigma=array(apply(th$Sigma,c(1,2),mean),dim=c(D,D,K)) #
    		}#
    if( !is.null(cstr$Gammat) && cstr$Gammat=='v')#
        {#%%% Equal volume constraint on Gamma#
        detG=rep(0,K);#
        for (k in 1:K){#
        	if (D==1) {detG[k]=th$Gamma[1:Lt,1:Lt,k]}#
             else {detG[k]=det(th$Gamma[1:Lt,1:Lt,k]);} #% 1x1#
        th$Gamma[1:Lt,1:Lt,k] = th$Gamma[1:Lt,1:Lt,k] / detG[k]#
        }#
        th$Gamma[1:Lt,1:Lt,]=sum(detG^(1/Lt)*ph$pi)*th$Gamma[1:Lt,1:Lt,];#
    		}#
    if(is.character(cstr$Gammat) && !is.null(cstr$Gammat) && cstr$Gammat[length(cstr$Gammat)]=='*')#
        {#%%% Equality constraint on Gammat#
        for (k in 1:K){#
        th$Gamma[1:Lt,1:Lt,k]=th$Gamma[1:Lt,1:Lt,k]%*%diag(rk_bar);    #
        th$Gamma[1:Lt,1:Lt,k]=matrix(1,Lt,Lt) * sum(th$Gamma[1:Lt,1:Lt,k])/N;  #
        }  #
    		}#
#
# % Compute phi.alpha %#
 if(!is.null(mahalt) && !is.null(mahaly)) { ph$alpha[k] = inv_digamma((digamma(phi$alpha[k] + (D+Lt)/2) - (1/rk_bar[k]) * sum( rk * log(1 + (1/2) * (mahaly[,k] + mahalt[,k]))))); ## potentielle erreur?passage difficile#
if(verb>=3) print(paste("K",k,"-> alpha=",alpha[k]));} #
else {ph$alpha = phi$alpha;}#
#
    if( ! is.character(cstr$pi) || is.null(cstr$pi))#
        {if(! is.null(cstr$pi)) {ph$pi=cstr$pi;}} else {#
    	if (!is.null(cstr$pi) && cstr$pi[1]=='*') #
    	{ph$pi=1/K*rep(1,K);} else {stop('  ERROR: invalid constraint on pi.');} #
        }    #
return(list(ph=ph,th=th))#
}
library(Matrix) #sparseMatrix#
library(MASS)#
library(abind) #abind#
library(corpcor) #is.positive.definite#
library(mvtnorm)#
library(fields)#
library(clusterGeneration)
source("/Users/Emeline/Documents/postdoc/programmation/SLLiM_R/inv_digamma.R")
source("/Users/Emeline/Documents/postdoc/programmation/SLLiM_R/logtpdfD.R")
source("/Users/Emeline/Documents/postdoc/programmation/SLLiM_R/logtpdfL.R")
source("/Users/Emeline/Documents/postdoc/programmation/SLLiM_R/mahalanobis_distance.R")
source("/Users/Emeline/Documents/postdoc/programmation/SLLiM_R/Maximization_hybrid.R")
source("/Users/Emeline/Documents/postdoc/programmation/SLLiM_R/sllim.R")
## setting dimensions#
L = 2#
D = 50#
K = 10#
#
## generating model parameters#
pik = runif(K)#
pik = pik/sum(pik)#
#
ck = matrix(rnorm(L*K),ncol=K,nrow=L)#
Gammak = lapply(1:K,function(k){cov2cor(genPositiveDefMat(dim=L,covMethod="unifcorrmat")$Sigma)}) ## list or array? #
#
Ak = lapply(1:K,function(k){matrix(rnorm(L*D),ncol=L,nrow=D)})#
bk = matrix(rnorm(D*K),ncol=K,nrow=D)#
Sigmak = lapply(1:K,function(k) diag(D))#
#
for (k in 1:K){image.plot(Sigmak[[k]])}#
#
## simulate dataset#
n = 100#
#
trainz = sample(1:K,size=n,replace=TRUE,prob=pik) #hidden multinomial variable#
trainx = sapply(trainz,function(k){rmvnorm(1,mean=ck[,k],sigma=Gammak[[k]])})#
trainy = sapply(1:n,function(i){Ak[[trainz[i]]]%*%trainx[,i] + bk[,trainz[i]] + as.vector(rmvnorm(1,mean=rep(0,D),sigma=Sigmak[[trainz[i]]]))})#
#
responses = trainx#
covariates = trainy
K = 10
mod = sllim(responses,covariates,in_K=K)
source("/Users/Emeline/Documents/postdoc/programmation/SLLiM_R/emgm")
source("/Users/Emeline/Documents/postdoc/programmation/SLLiM_R/emgm.R")
r = emgm(rbind(responses, covariates), init=K, 10, verb=0);
source("/Users/Emeline/Documents/postdoc/programmation/SLLiM_R/logsumexp.R")
source("/Users/Emeline/Documents/postdoc/programmation/SLLiM_R/loggausspdf.R")
K=10
r = emgm(rbind(responses, covariates), init=K, 10, verb=0);
K = 10
mod = sllim(responses,covariates,in_K=K)
100*c(0.2,0.15, 0.08, 0.06, 0.04)
sum(100*c(0.2,0.15, 0.08, 0.06, 0.04))
f=function(x){return((4*x^2+2*x+5)*(x<=8)+sinx(x)*(8<= x <= 15) + 0)}
f=function(x){return((4*x^2+2*x+5)*(x<=8)+sinx(x)*(8<= x & x<= 15) + 0)}
plot(f)
f=function(x){return((4*x^2+2*x+5)*(x<=8)+sin(x)*(8<= x & x<= 15) + 0)}
plot(f)
plot(f,-10,10)
plot(f,-10,20)
f=function(x){return((4*x^2+2*x+5)*(x<=8)+sin(x)*(8<= x & x<= 15) + 0*(x>15))}
plot(f,-10,20)
f=function(x){return((4*x^2+2*x+5)*(x<8)+sin(x)*(8<= x & x<= 15) + 0*(x>15))}
plot(f,-10,20)
plot(sin,8,15)
x=84*x^2+2*x+5
x=8
4*x^2+2*x+5
20.5+2*6.75
f = function(x)return(34*x/248)
f(c(518,248,516,306,271,280,271,58,82))
?options
library(gllim)
data(covariates)
dim(covariates)
myVect <- c(0.1/1, 0.2/2, 0.3/3, 0.4/4, 0.5/5, 0.6/6, 0.7/7) - See more at: http://bioinfo-fr.net/cest-lenfer#sthash.wvLMj3r6.dpuf
myVect <- c(0.1/1, 0.2/2, 0.3/3, 0.4/4, 0.5/5, 0.6/6, 0.7/7)
myVect
myVect==01
myVect==0.1
load("/Volumes/EPERTHAME/GLLiM-shock/cluster/res/parameters.RData")
library(fields)
load("/Volumes/EPERTHAME/GLLiM-shock/cluster/res/parameters.RData")
for (k in 1:5){image.plot(Sigma[,,k])}
for (k in 1:5){image.plot(Sigmak[,,k])}
for (k in 1:5){image.plot(Sigmak[[k]])}
image.plot(Sigma[[k]][1:100,100:1])
image.plot(Sigma[[k]][100:1,100:1])
image.plot(Sigma[[k]][100:1,1:100])
image.plot(Sigmak[[k]][100:1,1:100])
image.plot(Sigmak[[1]][100:1,1:100])
image.plot(Sigmak[[1]][1:100,100:1])
image.plot(Sigmak[[1]][1:100,100:1],yaxt="n")
image.plot(1:100,Sigmak[[1]][1:100,100:1],yaxt="n")
image.plot(1:100,Sigmak[[1]][1:100,100:1])
image.plot(x=1:100,Sigmak[[1]][1:100,100:1])
image.plot(Sigmak[[1]][1:100,100:1],yaxt="n")
image.plot(Sigmak[[1]][1:100,100:1],yaxt="n",xlim=c(1,100))
?image.plot
image.plot(Sigmak[[1]][1:100,100:1],yaxt="n",xaxt="n",lab.breaks=c(1:100))
image.plot(Sigmak[[1]][1:100,100:1],yaxt="n",xaxt="n")
library(fields)#
load("/Volumes/EPERTHAME/GLLiM-shock/cluster/res/parameters.RData")#
#
for (k in 1:5){image.plot(Sigmak[[k]])}#
#
image.plot(Sigmak[[1]][1:100,100:1],yaxt="n",xaxt="n")
Sigmak[[1]][Sigmak[[1]] <= 0.000001]=NA
image.plot(Sigmak[[1]][1:100,100:1],yaxt="n",xaxt="n")
library(fields)#
load("/Volumes/EPERTHAME/GLLiM-shock/cluster/res/parameters.RData")#
#
for (k in 1:5){image.plot(Sigmak[[k]])}#
#
image.plot(Sigmak[[1]][1:100,100:1],yaxt="n",xaxt="n")
par(mar=c(1,1,1,1))
image.plot(Sigmak[[1]][1:100,100:1],yaxt="n",xaxt="n")
par(mar=c(1,1,1,0.5))
image.plot(Sigmak[[1]][1:100,100:1],yaxt="n",xaxt="n")
par(mar=c(1,1,1,1))#
image.plot(Sigmak[[1]][1:100,100:1],yaxt="n",xaxt="n")
image.plot(Sigmak[[2]][1:100,100:1],yaxt="n",xaxt="n")
image.plot(Sigmak[[3]][1:100,100:1],yaxt="n",xaxt="n")
pdf("~/Documents/postdoc/présentations/réunion rentrée/plot/matrix.pdf")#
par(mar=c(1,1,1,1))#
image.plot(Sigmak[[3]][1:100,100:1],yaxt="n",xaxt="n")#
dev.off()
png("~/Documents/postdoc/présentations/réunion rentrée/plot/matrix.png")#
par(mar=c(1,1,1,1))#
image.plot(Sigmak[[3]][1:100,100:1],yaxt="n",xaxt="n")#
dev.off()
par(mar=c(1.2,1,1,1))
image.plot(Sigmak[[3]][1:100,100:1],yaxt="n",xaxt="n")
par(mar=c(1.5,1,1,1))
image.plot(Sigmak[[3]][1:100,100:1],yaxt="n",xaxt="n")
par(mar=c(1.5,1.4,1,1))
image.plot(Sigmak[[3]][1:100,100:1],yaxt="n",xaxt="n")
par(mar=c(1.5,1,1.5,1))
image.plot(Sigmak[[3]][1:100,100:1],yaxt="n",xaxt="n")
png("~/Documents/postdoc/présentations/réunion rentrée/plot/matrix.png")#
par(mar=c(1.5,1,1.5,1))#
image.plot(Sigmak[[3]][1:100,100:1],yaxt="n",xaxt="n")#
dev.off()
dev.off()
png("~/Documents/postdoc/présentations/réunion rentrée/plot/matrix.png")#
par(mar=c(1.5,1,1.5,1))#
image.plot(Sigmak[[3]][1:100,100:1],yaxt="n",xaxt="n")#
dev.off()
ls()
n_iso
n_true
n_diag
install.packages("~/Documents/postdoc/programmation/package/xLLiM_1.0.tar.gz",type="source",repos=NULL)
library(xLLiM)
data(data.xllim)
data(data.xllim)
data(data.xllim)
dim(data.xllim) # 52 100
X = data.xllim[1:2,]
Y = data.xllim[3:52,]
dim(X)
dim(Y)
data(data.xllim.test)
dim(data.xllim.test) # 50 20
data(data.xllim)
dim(data.xllim) # 52 100
responses = data.xllim[1:2,] # 2 responses in rows and 100 observations in columns
covariates = data.xllim[3:52,] # 50 covariates in rows and 100 observations in columns
K = 10
r = emgm(rbind(responses, covariates), init=K);
library(xLLiM)#
library(R.matlab)#
library(Matrix)#
library(corpcor)#
library(MASS)#
library(abind)
r = emgm(rbind(responses, covariates), init=K);
r = emgm(rbind(responses, covariates), init=K);
? emgm
dim(rbind(responses, covariates))
r = emgm(rbind(responses, covariates), init=K);
r = emgm(rbind(responses, covariates), init=K,verb=0);
r = emgm(rbind(responses, covariates), init=K)
names(r)
r$R
r$label
r$model
r$llh
install.packages("~/Documents/postdoc/programmation/package/xLLiM_1.0.tar.gz",type="source",repos=NULL)#
library(xLLiM)#
library(R.matlab)#
library(Matrix)#
library(corpcor)#
library(MASS)#
library(abind)
data(data.xllim)#
dim(data.xllim) # 52 100#
responses = data.xllim[1:2,] # 2 100 #
covariates = data.xllim[3:52,] # 50 100#
#
#### data test#
  data(data.xllim.test)#
  dim(data.xllim.test) # 50 20#
#### xllim-package#
### Not run#
#
## Example of inverse regression with GLLiM model#
data(data.xllim)  #
dim(data.xllim) # 52 100#
responses = data.xllim[1:2,] # 2 responses in rows and 100 observations in columns#
covariates = data.xllim[3:52,] # 50 covariates in rows and 100 observations in columns#
#
## Set 10 components in the model#
K = 10#
#
## Step 1: initialization of the posterior probabilities (class assignments) #
## via standard EM for a joint Gaussian Mixture Model#
r = emgm(rbind(responses, covariates), init=K);
r = emgm(rbind(responses, covariates), init=K);
r = emgm(rbind(responses, covariates), init=K);
r = emgm(rbind(responses, covariates), init=K);
install.packages("~/Documents/postdoc/programmation/package/xLLiM_1.0.tar.gz",type="source",repos=NULL)#
library(xLLiM)#
library(R.matlab)#
library(Matrix)#
library(corpcor)#
library(MASS)#
library(abind)
#### data #
data(data.xllim)#
dim(data.xllim) # 52 100#
responses = data.xllim[1:2,] # 2 100 #
covariates = data.xllim[3:52,] # 50 100#
#
#### data test#
  data(data.xllim.test)#
  dim(data.xllim.test) # 50 20#
#### xllim-package#
### Not run#
#
## Example of inverse regression with GLLiM model#
data(data.xllim)  #
dim(data.xllim) # 52 100#
responses = data.xllim[1:2,] # 2 responses in rows and 100 observations in columns#
covariates = data.xllim[3:52,] # 50 covariates in rows and 100 observations in columns#
#
## Set 10 components in the model#
K = 10#
#
## Step 1: initialization of the posterior probabilities (class assignments) #
## via standard EM for a joint Gaussian Mixture Model#
r = emgm(rbind(responses, covariates), init=K);
rm(list=ls())
rm(list=ls())
rm(list=ls())
library(R.matlab)#
library(Matrix)#
library(corpcor)#
library(MASS)#
library(abind)#
#
setwd("~/Documents/postdoc/programmation/package/xLLiM/R/")
sapply(list.files("~/Documents/postdoc/programmation/package/xLLiM/R/"),source)
data(data.xllim)#
dim(data.xllim) # 52 100#
responses = data.xllim[1:2,] # 2 100 #
covariates = data.xllim[3:52,] # 50 100
data(data.xllim.test)#
  dim(data.xllim.test) # 50 20#
#### xllim-package#
### Not run#
#
## Example of inverse regression with GLLiM model#
data(data.xllim)  #
dim(data.xllim) # 52 100#
responses = data.xllim[1:2,] # 2 responses in rows and 100 observations in columns#
covariates = data.xllim[3:52,] # 50 covariates in rows and 100 observations in columns#
#
## Set 10 components in the model#
K = 10
r = emgm(rbind(responses, covariates), init=K);
rm(list=ls())#
#install.packages("~/Documents/postdoc/programmation/package/xLLiM_1.0.tar.gz",type="source",repos=NULL)#
library(xLLiM)#
library(R.matlab)#
library(Matrix)#
library(corpcor)#
library(MASS)#
library(abind)#
#
setwd("~/Documents/postdoc/programmation/package/xLLiM/R/")#
sapply(list.files("~/Documents/postdoc/programmation/package/xLLiM/R/"),source)#
#
#### data #
data(data.xllim)#
dim(data.xllim) # 52 100#
responses = data.xllim[1:2,] # 2 100 #
covariates = data.xllim[3:52,] # 50 100#
#
#### data test#
  data(data.xllim.test)#
  dim(data.xllim.test) # 50 20#
#### xllim-package#
### Not run#
#
## Example of inverse regression with GLLiM model#
data(data.xllim)  #
dim(data.xllim) # 52 100#
responses = data.xllim[1:2,] # 2 responses in rows and 100 observations in columns#
covariates = data.xllim[3:52,] # 50 covariates in rows and 100 observations in columns#
#
## Set 10 components in the model#
K = 10#
#
## Step 1: initialization of the posterior probabilities (class assignments) #
## via standard EM for a joint Gaussian Mixture Model#
r = emgm(rbind(responses, covariates), init=K);
rm(list=ls())#
#install.packages("~/Documents/postdoc/programmation/package/xLLiM_1.0.tar.gz",type="source",repos=NULL)#
library(xLLiM)#
library(R.matlab)#
library(Matrix)#
library(corpcor)#
library(MASS)#
library(abind)#
#
setwd("~/Documents/postdoc/programmation/package/xLLiM/R/")#
# sapply(list.files("~/Documents/postdoc/programmation/package/xLLiM/R/"),source)#
#
#### data #
data(data.xllim)#
dim(data.xllim) # 52 100#
responses = data.xllim[1:2,] # 2 100 #
covariates = data.xllim[3:52,] # 50 100#
#
#### data test#
  data(data.xllim.test)#
  dim(data.xllim.test) # 50 20#
#### xllim-package#
### Not run#
#
## Example of inverse regression with GLLiM model#
data(data.xllim)  #
dim(data.xllim) # 52 100#
responses = data.xllim[1:2,] # 2 responses in rows and 100 observations in columns#
covariates = data.xllim[3:52,] # 50 covariates in rows and 100 observations in columns#
#
## Set 10 components in the model#
K = 10#
#
## Step 1: initialization of the posterior probabilities (class assignments) #
## via standard EM for a joint Gaussian Mixture Model#
r = emgm(rbind(responses, covariates), init=K);
rm(list=ls())#
#install.packages("~/Documents/postdoc/programmation/package/xLLiM_1.0.tar.gz",type="source",repos=NULL)#
library(xLLiM)#
library(R.matlab)#
library(Matrix)#
library(corpcor)#
library(MASS)#
library(abind)#
#
setwd("~/Documents/postdoc/programmation/package/xLLiM/R/")#
# sapply(list.files("~/Documents/postdoc/programmation/package/xLLiM/R/"),source)#
#
#### data #
data(data.xllim)#
dim(data.xllim) # 52 100#
responses = data.xllim[1:2,] # 2 100 #
covariates = data.xllim[3:52,] # 50 100#
#
#### data test#
  data(data.xllim.test)#
  dim(data.xllim.test) # 50 20#
#### xllim-package#
### Not run#
#
## Example of inverse regression with GLLiM model#
data(data.xllim)  #
dim(data.xllim) # 52 100#
responses = data.xllim[1:2,] # 2 responses in rows and 100 observations in columns#
covariates = data.xllim[3:52,] # 50 covariates in rows and 100 observations in columns#
#
## Set 10 components in the model#
K = 10#
#
## Step 1: initialization of the posterior probabilities (class assignments) #
## via standard EM for a joint Gaussian Mixture Model#
r = emgm(rbind(responses, covariates), init=K);
rm(list=ls())#
#install.packages("~/Documents/postdoc/programmation/package/xLLiM_1.0.tar.gz",type="source",repos=NULL)#
library(xLLiM)#
library(R.matlab)#
library(Matrix)#
library(corpcor)#
library(MASS)#
library(abind)#
#
setwd("~/Documents/postdoc/programmation/package/xLLiM/R/")#
# sapply(list.files("~/Documents/postdoc/programmation/package/xLLiM/R/"),source)#
#
#### data #
data(data.xllim)#
dim(data.xllim) # 52 100#
responses = data.xllim[1:2,] # 2 100 #
covariates = data.xllim[3:52,] # 50 100#
#
#### data test#
  data(data.xllim.test)#
  dim(data.xllim.test) # 50 20#
#### xllim-package#
### Not run#
#
## Example of inverse regression with GLLiM model#
data(data.xllim)  #
dim(data.xllim) # 52 100#
responses = data.xllim[1:2,] # 2 responses in rows and 100 observations in columns#
covariates = data.xllim[3:52,] # 50 covariates in rows and 100 observations in columns#
#
## Set 10 components in the model#
K = 10#
#
## Step 1: initialization of the posterior probabilities (class assignments) #
## via standard EM for a joint Gaussian Mixture Model#
r = emgm(rbind(responses, covariates), init=K);
rm(list=ls())#
#install.packages("~/Documents/postdoc/programmation/package/xLLiM_1.0.tar.gz",type="source",repos=NULL)#
library(xLLiM)#
library(R.matlab)#
library(Matrix)#
library(corpcor)#
library(MASS)#
library(abind)#
#
setwd("~/Documents/postdoc/programmation/package/xLLiM/R/")#
# sapply(list.files("~/Documents/postdoc/programmation/package/xLLiM/R/"),source)#
#
#### data #
data(data.xllim)#
dim(data.xllim) # 52 100#
responses = data.xllim[1:2,] # 2 100 #
covariates = data.xllim[3:52,] # 50 100#
#
#### data test#
  data(data.xllim.test)#
  dim(data.xllim.test) # 50 20#
#### xllim-package#
### Not run#
#
## Example of inverse regression with GLLiM model#
data(data.xllim)  #
dim(data.xllim) # 52 100#
responses = data.xllim[1:2,] # 2 responses in rows and 100 observations in columns#
covariates = data.xllim[3:52,] # 50 covariates in rows and 100 observations in columns#
#
## Set 10 components in the model#
K = 10#
#
## Step 1: initialization of the posterior probabilities (class assignments) #
## via standard EM for a joint Gaussian Mixture Model#
r = emgm(rbind(responses, covariates), init=K);
rm(list=ls())#
#install.packages("~/Documents/postdoc/programmation/package/xLLiM_1.0.tar.gz",type="source",repos=NULL)#
library(xLLiM)#
library(R.matlab)#
library(Matrix)#
library(corpcor)#
library(MASS)#
library(abind)#
#
setwd("~/Documents/postdoc/programmation/package/xLLiM/R/")#
# sapply(list.files("~/Documents/postdoc/programmation/package/xLLiM/R/"),source)#
#
#### data #
data(data.xllim)#
dim(data.xllim) # 52 100#
responses = data.xllim[1:2,] # 2 100 #
covariates = data.xllim[3:52,] # 50 100#
#
#### data test#
  data(data.xllim.test)#
  dim(data.xllim.test) # 50 20#
#### xllim-package#
### Not run#
#
## Example of inverse regression with GLLiM model#
data(data.xllim)  #
dim(data.xllim) # 52 100#
responses = data.xllim[1:2,] # 2 responses in rows and 100 observations in columns#
covariates = data.xllim[3:52,] # 50 covariates in rows and 100 observations in columns#
#
## Set 10 components in the model#
K = 10#
#
## Step 1: initialization of the posterior probabilities (class assignments) #
## via standard EM for a joint Gaussian Mixture Model#
r = emgm(rbind(responses, covariates), init=K);
rm(list=ls())#
#install.packages("~/Documents/postdoc/programmation/package/xLLiM_1.0.tar.gz",type="source",repos=NULL)#
library(xLLiM)#
library(R.matlab)#
library(Matrix)#
library(corpcor)#
library(MASS)#
library(abind)#
#
setwd("~/Documents/postdoc/programmation/package/xLLiM/R/")#
# sapply(list.files("~/Documents/postdoc/programmation/package/xLLiM/R/"),source)#
#
#### data #
data(data.xllim)#
dim(data.xllim) # 52 100#
responses = data.xllim[1:2,] # 2 100 #
covariates = data.xllim[3:52,] # 50 100#
#
#### data test#
  data(data.xllim.test)#
  dim(data.xllim.test) # 50 20#
#### xllim-package#
### Not run#
#
## Example of inverse regression with GLLiM model#
data(data.xllim)  #
dim(data.xllim) # 52 100#
responses = data.xllim[1:2,] # 2 responses in rows and 100 observations in columns#
covariates = data.xllim[3:52,] # 50 covariates in rows and 100 observations in columns#
#
## Set 10 components in the model#
K = 10#
#
## Step 1: initialization of the posterior probabilities (class assignments) #
## via standard EM for a joint Gaussian Mixture Model#
r = emgm(rbind(responses, covariates), init=K);
rm(list=ls())#
#install.packages("~/Documents/postdoc/programmation/package/xLLiM_1.0.tar.gz",type="source",repos=NULL)#
library(xLLiM)#
library(R.matlab)#
library(Matrix)#
library(corpcor)#
library(MASS)#
library(abind)#
#
setwd("~/Documents/postdoc/programmation/package/xLLiM/R/")#
# sapply(list.files("~/Documents/postdoc/programmation/package/xLLiM/R/"),source)#
#
#### data #
data(data.xllim)#
dim(data.xllim) # 52 100#
responses = data.xllim[1:2,] # 2 100 #
covariates = data.xllim[3:52,] # 50 100#
#
#### data test#
  data(data.xllim.test)#
  dim(data.xllim.test) # 50 20#
#### xllim-package#
### Not run#
#
## Example of inverse regression with GLLiM model#
data(data.xllim)  #
dim(data.xllim) # 52 100#
responses = data.xllim[1:2,] # 2 responses in rows and 100 observations in columns#
covariates = data.xllim[3:52,] # 50 covariates in rows and 100 observations in columns#
#
## Set 10 components in the model#
K = 10#
#
## Step 1: initialization of the posterior probabilities (class assignments) #
## via standard EM for a joint Gaussian Mixture Model#
r = emgm(rbind(responses, covariates), init=K);
mod = gllim(responses,covariates,in_K=K,in_r=r)
mod = gllim(responses,covariates,in_K=K)
mod = gllim(responses,covariates,in_K=K,in_r=r,Lw=1)
mod = gllim(responses,covariates,in_K=K,in_r=r,Lw=1)
mod = gllim(responses,covariates,in_K=K,in_r=r,Lw=1)
mod = gllim(responses,covariates,in_K=K,in_r=r,Lw=2)
mod = gllim(responses,covariates,in_K=K,in_r=r,Lw=2)
mod = gllim(responses,covariates,in_K=K,in_r=r,Lw=2)
K = 5
r = emgm(rbind(responses, covariates), init=K);
mod = gllim(responses,covariates,in_K=K,in_r=r)
mod = gllim(responses,covariates,in_K=K)
mod = gllim(responses,covariates,in_K=K,in_r=r,Lw=1)
mod = gllim(responses,covariates,in_K=K,in_r=r,Lw=1)
mod = gllim(responses,covariates,in_K=K,in_r=r,Lw=1)
mod = gllim(responses,covariates,in_K=K,in_r=r,Lw=1)
mod = gllim(responses,covariates,in_K=K,in_r=r,Lw=1)
mod = gllim(responses,covariates,in_K=K,in_r=r,Lw=1)
mod = gllim(responses,covariates,in_K=K,in_r=r,Lw=1)
mod = gllim(responses,covariates,in_K=K,in_r=r,Lw=1)
mod = gllim(responses,covariates,in_K=K,in_r=r,Lw=1)
mod = gllim(responses,covariates,in_K=K,in_r=r,Lw=1)
K = 5#
#
## Step 1: initialization of the posterior probabilities (class assignments) #
## via standard EM for a joint Gaussian Mixture Model#
r = emgm(rbind(responses, covariates), init=K); #
#
## Step 2: estimation of the model#
## Default Lw=0 and cstr$Sigma="i"#
mod = gllim(responses,covariates,in_K=K,in_r=r)#
#
## Skip Step 1 and go to Step 2: automatic initialization and estimation of the model#
mod = gllim(responses,covariates,in_K=K)#
#
## Alternative: Add Lw=1 latent factor to the model#
mod = gllim(responses,covariates,in_K=K,in_r=r,Lw=1)
mod = gllim(responses,covariates,in_K=K,in_r=r,cstr=list(Sigma="i")) #default
mod = gllim(responses,covariates,in_K=K,in_r=r,cstr=list(Sigma="d"))
mod = gllim(responses,covariates,in_K=K,in_r=r,cstr=list(Sigma=""))
mod = gllim(responses,covariates,in_K=K,in_r=r,cstr=list(Sigma="*"))
data(data.xllim.test)
pred = gllim_inverse_map(data.xllim.test,mod)
pred$x_exp
responses
n = ncol(covariates)
ntest=10
id.test = sample(1:n,ntest)
train.responses = responses[,-id.test]
train.covariates = covariates[,-id.test]
test.responses = responses[,id.test]
test.covariates = covariates[,id.test]
mod = gllim(train.responses, train.covariates,in_K=K)
norm_term = sqrt(rowMeans(sweep(test.responses,1,rowMeans(responses),"-")^2))
nrmse = sqrt(rowMeans((test.responses-pred)^2))/norm_term
pred = gllim_inverse_map(test.covariates,mod)$x_exp
norm_term = sqrt(rowMeans(sweep(test.responses,1,rowMeans(responses),"-")^2))
nrmse = sqrt(rowMeans((test.responses-pred)^2))/norm_term
data(data.xllim)
K=10
data(data.xllim)
K=10
r = emgm(data.xllim, init=K, 10, verb=0);
r$R # estimation of posterior probabilities to belong to
data(data.xllim)
K=5
r = emgm(data.xllim, init=K, verb=0);
r$R # estimation of posterior probabilities to belong to
data(data.xllim)
K = 5
r = emgm(data.xllim, init=K);
responses = data.xllim[1:2,] # 2 responses in rows and 100 observations in columns
covariates = data.xllim[3:52,] # 50 covariates in rows and 100 observations in columns
mod = gllim(responses,covariates,in_K=K,in_r=r);
mod = gllim(responses,covariates,in_K=K)
mod = gllim(responses,covariates,in_K=K,in_r=r,Lw=1)
mod = gllim(responses,covariates,in_K=K,in_r=r,cstr=list(Sigma="i"))
mod = gllim(responses,covariates,in_K=K,in_r=r,cstr=list(Sigma="d"))
mod = gllim(responses,covariates,in_K=K,in_r=r,cstr=list(Sigma=""))
mod = gllim(responses,covariates,in_K=K,in_r=r,cstr=list(Sigma="*"))
data(data.xllim)
K = 5
r = emgm(data.xllim, init=K);
responses = data.xllim[1:2,] # 2 responses in rows and 100 observations in columns
covariates = data.xllim[3:52,] # 50 covariates in rows and 100 observations in columns
mod = gllim(responses,covariates,in_K=K,in_r=r);
data(data.xllim.test)
pred = gllim_inverse_map(data.xllim.test,mod)
print(pred$x_exp)
data(data.xllim)
responses = data.xllim[1:2,] # 2 responses in rows and 100 observations in columns
covariates = data.xllim[3:52,] # 50 covariates in rows and 100 observations in columns
## Setting 5 components in the model
K = 5
r = emgm(rbind(responses, covariates), init=K);
mod = sllim(responses,covariates,in_K=K,in_r=r);
mod = sllim(responses,covariates,in_K=K)
mod = sllim(responses,covariates,in_K=K,in_r=r,Lw=1)
mod = sllim(responses,covariates,in_K=K,in_r=r,cstr=list(Sigma="i"))
mod = sllim(responses,covariates,in_K=K,in_r=r,cstr=list(Sigma="d"))
mod = sllim(responses,covariates,in_K=K,in_r=r,cstr=list(Sigma=""))
# Full matrix but equal between components
mod = sllim(responses,covariates,in_K=K,in_r=r,cstr=list(Sigma="*"))
data(data.xllim)
K = 5
r = emgm(data.xllim, init=K);
responses = data.xllim[1:2,] # 2 responses in rows and 100 observations in columns
covariates = data.xllim[3:52,] # 50 covariates in rows and 100 observations in columns
mod = sllim(responses,covariates,in_K=K,in_r=r);
data(data.xllim.test)
pred = sllim_inverse_map(data.xllim.test,mod)
print(pred$x_exp)
